{"version":3,"sources":["Store/action-types/scrum-data.ts","Data/dataStatuses.ts","Store/Reducer/scrum-data/index.ts","Store/action-types/router-data.ts","Store/Reducer/router-data/index.ts","Store/index.ts","Store/Action/router-data/index.ts","Containers/DndTask/index.tsx","Containers/TaskAdd/index.tsx","Containers/DndColumn/index.tsx","Data/dndData.ts","Store/Action/scrum-data/index.ts","Containers/DndContainer/index.tsx","hoc/Portal/index.tsx","Containers/TaskModal/index.tsx","Containers/Task/index.tsx","App.js","serviceWorker.js","index.js"],"names":["ScrumDataAction","dataStatuses","RouterDataAction","initialState","dataStatus","data","tasks","columns","columnOrder","initialData","isModalShow","route","backRoute","location","allReducers","combineReducers","routerDataReducer","state","action","type","setRouterData","payload","scrumDataReducer","setScrumData","setScrumDataStatus","store","createStore","composeWithDevTools","applyMiddleware","thunk","Container","styled","div","props","isDragging","CroppedSpan","span","RouterLink","Link","DndTask","connect","dispatch","bindActionCreators","onDeleteTaskClick","bind","onLinkClick","this","task","id","index","draggableId","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","content","to","onClick","DeleteButton","React","PureComponent","Input","input","Button","button","TaskAdd","taskContent","onTaskChange","onButtonClick","e","value","target","setState","columnId","onAddTaskClick","onChange","disabled","Boolean","FadeInTop","keyframes","css","Column","isDraggingOver","ColumnHeader","Title","DndColumn","columnTitle","onDeleteColumnClick","onTitleChange","onTitleBlur","column","title","taskId","onTitleUpdate","isDeleteButtonDisabled","length","contentEditable","onBlur","droppableId","shapshot","droppableProps","map","key","placeholder","createSomeData","numBerOfTasks","numberOfColumns","generatedTasks","Array","fill","reduce","acc","_","newTask","tasksIds","Object","keys","generatedColumns","newColumn","status","getScrumData","a","Promise","resolve","pseudoFetchData","setTimeout","console","error","ColumnContainer","ButtonWrapper","DndContainer","onDragEnd","onDragStart","onDragUpdate","onAddColumnClick","newColumnId","newColumnTitle","newColumnOrder","newColumns","newData","filter","newParentColumnTasks","tasksLength","document","body","style","color","transition","update","destination","opacity","backgroundColor","result","source","isDragPositionEqual","dragInsideColumn","dragOutsideColumn","from","splice","newTasksIds","startColumn","finishColumn","startTasksIds","newStartColumn","finishTasksIds","newFinishColumn","isAddColumnShow","direction","columnTasks","Portal","el","createElement","appendChild","removeChild","children","ReactDOM","createPortal","ModalContainer","ModalBg","ModalContent","TaskModal","routerData","srumData","match","params","Task","background","App","className","exact","path","component","window","hostname","customHistory","createBrowserHistory","render","history","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.efa22e94.chunk.js","sourcesContent":["export enum ScrumDataAction {\n    setScrumData = 'ScrumDataAction/setScrumData',\n    setScrumDataStatus = 'ScrumDataAction/setScrumDataStatus'\n}","import { Dictionary } from \"../types\";\n\nexport const dataStatuses: Dictionary<string> = {\n    initial: 'initial',\n    success: 'success',\n    error: 'error',\n    fetching: 'fetching',\n    updating: 'updating'\n};","import { ScrumDataState } from './types';\nimport { ScrumDataActions } from '../../Action/scrum-data/types';\nimport { ScrumDataAction } from '../../action-types/scrum-data';\nimport { dataStatuses } from '../../../Data/dataStatuses';\n\nconst initialState: ScrumDataState = {\n    dataStatus: dataStatuses.initial,\n    data: {\n        tasks: {},\n        columns: {},\n        columnOrder: []\n    }\n};\n\nexport const scrumDataReducer = (\n    state: ScrumDataState = initialState,\n    action: ScrumDataActions\n) => {\n    switch (action.type) {\n        case ScrumDataAction.setScrumData: {\n            const { payload } = action;\n\n            return { ...state, data: payload }\n        }\n        case ScrumDataAction.setScrumDataStatus: {\n            const { payload } = action;\n\n            return { ...state, dataStatus: payload}\n        }\n        default: {\n            return state\n        }\n    }\n}","export enum RouterDataAction {\n    setRouterData = 'RouterDataAction/setRouterData',\n}","import { RouterDataState } from \"./types\";\nimport { RouterDataAction } from \"../../action-types/router-data\";\nimport { RouterDataActions } from '../../Action/router-data/types';\n\nconst initialData: RouterDataState = {\n    isModalShow: false,\n    route: '',\n    backRoute: '',\n    location: null\n};\n\nexport const routerDataReducer = (\n    state: RouterDataState = initialData,\n    action: RouterDataActions\n) => {\n    switch (action.type) {\n        case RouterDataAction.setRouterData: {\n            return {...state, ...action.payload}\n        }    \n        default: {\n            return state\n        }\n    }\n}","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport { scrumDataReducer } from './Reducer/scrum-data';\nimport { State } from './types';\nimport { routerDataReducer } from './Reducer/router-data';\n\nconst allReducers = combineReducers<State>({\n    routerDataReducer,\n    scrumDataReducer\n});\n\n\n// const someActionsListener = (state: State, action: any) => {\n//     // if () {}\n//     // some logic here\n//     // for example logout:\n//     // if (action.type === 'LOGOUT) {\n//         // const stateKiller = undefined;\n//         // return allReducers(stateKiller, action);\n//     // }\n\n//     return allReducers(state, action);\n// }\n\nexport const store = createStore(\n    allReducers,\n    composeWithDevTools(applyMiddleware(thunk))\n)\n\n// some selector here\nexport const getState = (reduxState: State) => reduxState.scrumDataReducer;","import { RouterDataState } from \"../../Reducer/router-data/types\";\nimport { RouterDataAction } from '../../action-types/router-data';\nimport { SetRouterData } from \"./types\";\n\nexport const setRouterData = (data: RouterDataState): SetRouterData => ({\n    type: RouterDataAction.setRouterData,\n    payload: data\n})","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { Link } from 'react-router-dom';\n\nimport { DndTaskProps, DndTaskState } from './types';\nimport { ReduxDispatch } from '../../Store/types';\n\nimport { setRouterData } from '../../Store/Action/router-data';\n\nimport { DeleteButton } from '../DndColumn';\nimport { RouterDataState } from '../../Store/Reducer/router-data/types';\n\nconst Container = styled.div<{isDragging: boolean}>`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    border: 1px solid lightgray;\n    padding: 8px;\n    margin-bottom: 8px;\n    border-radius: 4px;\n    background-color: ${(props: any) => props.isDragging ? 'lightgreen' : 'white'};\n\n    :last-child {\n        margin-bottom: 0;\n    }\n`;\n\nconst CroppedSpan = styled.span`\n    width: 70%;\n    text-align: left;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n`;\n\nconst RouterLink = styled(Link)`\n    position: relative;\n    width: 22px;\n    height: 22px;\n    padding: 0;\n    margin: 0;\n    margin-left: auto;\n    border: 0;\n    background-color: transparent;\n    transform: rotate(45deg);\n    cursor: default;\n\n    &::after {\n        content: '';\n        position: absolute;\n        left: 50%;\n        top: 5px;\n        transform: translateX(-50%);\n        width: 0;\n        height: 0;\n        border-left: 4px solid transparent;\n        border-right: 4px solid transparent;\n        border-bottom: 4px solid lightgray;\n        border-top: 0;\n        transition: 0.3s;\n    }\n\n    &::before {\n        content: '';\n        position: absolute;\n        right: 50%;\n        bottom: 5px;\n        transform: translateX(50%);\n        width: 0;\n        height: 0;\n        border-left: 4px solid transparent;\n        border-right: 4px solid transparent;\n        border-top: 4px solid lightgray;\n        border-bottom: 0;\n        transition: 0.3s;\n    }\n\n    &:hover::after {\n        border-bottom: 4px solid lightcoral;\n    }\n\n    &:hover::before {\n        border-top: 4px solid lightcoral;\n    }\n`;\n\nconst mapDispatchToProps = (dispatch: ReduxDispatch) => (\n    bindActionCreators(\n        {\n            setRouterData: setRouterData\n        }, dispatch\n    )\n)\n\nexport const DndTask = connect(null, mapDispatchToProps)(\n    class DndTask extends React.PureComponent<DndTaskProps, DndTaskState> {\n        constructor(props: DndTaskProps) {\n            super(props);\n\n            this.onDeleteTaskClick = this.onDeleteTaskClick.bind(this);\n            this.onLinkClick = this.onLinkClick.bind(this);\n        };\n\n        onDeleteTaskClick(): void {\n            this.props.onDeleteTaskClick(this.props.task.id);\n        };\n\n        onLinkClick(): void {\n            const routerData: RouterDataState = {\n                isModalShow: true\n            };\n\n            this.props.setRouterData(routerData);\n        }\n\n        public render() {\n            const { task, index } = this.props;\n\n            return (\n                <Draggable draggableId={task.id} index={index}>\n                    {(provided, snapshot) => {\n\n                        return <Container\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                    ref={provided.innerRef}\n                                    isDragging={snapshot.isDragging}\n                                >\n                                    <CroppedSpan>\n                                        {task.content}\n                                    </CroppedSpan>\n                                    <RouterLink to={`/task/${task.id}`} onClick={this.onLinkClick}/>\n                                    <DeleteButton\n                                        type='button'\n                                        onClick={this.onDeleteTaskClick} />\n                                </Container>\n                    }}\n                </Draggable>\n            )\n        }\n    }\n)","import React, { ChangeEvent } from 'react';\nimport styled from 'styled-components';\nimport { TaskAddState, TaskAddProps } from './types';\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    padding: 8px;\n`;\n\nconst Input = styled.input`\n    width: 70%;\n    padding: 5px;\n    border: 1px solid lightgray;\n    border-radius: 4px;\n`;\n\nconst Button = styled.button`\n    padding: 5px;\n    border: 1px solid lightgray;\n    border-radius: 4px;\n\n    :disabled {\n        opacity: 0.7;\n    }\n`;\n\nexport class TaskAdd extends React.PureComponent<TaskAddProps, TaskAddState> {\n    constructor(props: TaskAddProps) {\n        super(props);\n\n        this.state = {\n            taskContent: ''\n        };\n\n        this.onTaskChange = this.onTaskChange.bind(this);\n        this.onButtonClick = this.onButtonClick.bind(this);\n    }\n\n    onTaskChange(e: ChangeEvent<HTMLInputElement>): void {\n        const value: string = e.target.value;\n\n        this.setState({\n            taskContent: value\n        });\n    }\n\n    onButtonClick() {\n        const { taskContent } = this.state;\n\n        if (!taskContent) {\n            return\n        }\n\n        const { columnId, onAddTaskClick } = this.props;\n\n        onAddTaskClick(columnId, taskContent);\n\n        this.setState({\n            taskContent: ''\n        });\n    }\n\n    public render() {\n        const { taskContent } = this.state;\n\n        return (\n            <Container>\n                <Input value={taskContent} onChange={this.onTaskChange}/>\n                <Button onClick={this.onButtonClick} disabled={!Boolean(taskContent)}>Добавить</Button>\n            </Container>\n        )\n    }\n}","import React, { ChangeEvent } from 'react';\nimport styled, { css, keyframes }  from 'styled-components';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\n\nimport { DndColumnProps, DndColumnState } from './types';\nimport { Task } from '../../Data/types';\n\nimport { DndTask } from '../DndTask';\nimport { TaskAdd } from '../TaskAdd';\n\nconst FadeInTop = keyframes`\n    0% {\n        opacity: 0;\n        transform: translateY(-50px);\n    }\n    100% {\n        opacity: 1;\n        transform: translateY(0px);\n    }\n`;\n\nconst FadeInTopAnimation = (props: any) => \n    css`\n        ${FadeInTop} 0.2s linear ${props.index * 0.1}s\n    `;\n\nconst Container = styled.div<any>`\n    display: flex;\n    flex-direction: column;\n    width: 250px;\n    max-height: 100%;\n    margin: 8px;\n    border: 1px solid lightgray;\n    border-radius: 4px;\n    background-color: white;\n    // opacity: 0;\n    // animation: ${FadeInTopAnimation};\n`;\n\nconst Column = styled.div<{isDraggingOver: boolean}>`\n    max-height: calc(100% - 22px - 10px);\n    flex: 1 1 100%;\n    padding: 8px;\n    transition: background-color 0.3s ease;\n    background-color: ${(props: any) => props.isDraggingOver ? 'skyblue' : 'inherit'};\n    overflow-y: auto;\n`;\n\nconst ColumnHeader = styled.div`\n    display: flex;\n    flex-direction: row;\n    padding: 16px 8px 8px;\n    margin-bottom: 10px;\n`;\n\nconst Title = styled.input`\n    flex-shrink: 0;\n    max-width: 75%;\n    width: 75%;\n    height: 22px;\n    margin: 0 auto 0 0;\n    border: 0;\n    padding: 0;\n    font-size: 16px;\n    line-height: 20px;\n    text-align: left;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n\n    :focused {\n        text-overflow: clip;\n        overflow: visible;\n    }\n`;\n\nexport const DeleteButton = styled.button`\n    position: relative;\n    width: 22px;\n    height: 22px;\n    padding: 0;\n    margin: 0;\n    border: 0;\n    background-color: transparent;\n\n    ::before {\n        content: '';\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translateX(-50%) translateY(-50%) rotate(45deg);\n        width: 3px;\n        height: 15px;\n        background-color: lightgray;\n        transition: 0.3s;\n    }\n\n    ::after {\n        content: '';\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translateX(-50%) translateY(-50%) rotate(-45deg);\n        width: 3px;\n        height: 15px;\n        background-color: lightgray;\n        transition: 0.3s;\n    }\n\n    :hover::after {\n        background-color: lightcoral\n    };\n\n    :hover::before {\n        background-color: lightcoral;\n    }\n\n    :disabled::after {\n        opacity: 0.5;\n    }\n\n    :disabled::before {\n        opacity: 0.5;\n    }\n\n    :disabled:hover::after {\n        opacity: 0.5;\n        background-color: lightgray;\n    }\n\n    :disabled:hover::before{\n        opacity: 0.5;\n        background-color: lightgray;\n    }\n`;\n\nexport class DndColumn extends React.PureComponent<DndColumnProps, DndColumnState> {\n    constructor(props: DndColumnProps) {\n        super(props);\n\n        this.state = {\n            columnTitle: ''\n        }\n\n        this.onDeleteColumnClick = this.onDeleteColumnClick.bind(this);\n        this.onDeleteTaskClick = this.onDeleteTaskClick.bind(this);\n        this.onTitleChange = this.onTitleChange.bind(this);\n        this.onTitleBlur = this.onTitleBlur.bind(this);\n    };\n\n    componentDidMount() {\n        this.setState({\n            columnTitle: this.props.column.title\n        })\n    }\n\n    onDeleteColumnClick(): void {\n        this.props.onDeleteColumnClick(this.props.column.id);\n    }\n\n    onDeleteTaskClick(taskId: string): void {\n        const columnId = this.props.column.id;\n\n        this.props.onDeleteTaskClick(taskId, columnId);\n    }\n\n    onTitleChange(e: ChangeEvent<HTMLInputElement>) {\n        // there is no calling ?????????????????\n        const value = e.target.value;\n\n        this.setState({\n            columnTitle: value\n        });\n    }\n\n    onTitleBlur(): void {\n        const { column, onTitleUpdate } = this.props;\n        const { columnTitle } = this.state;\n\n        if (columnTitle === column.title) {\n            return\n        }\n\n        if (!columnTitle) {\n            this.setState({\n                columnTitle: column.title\n            });\n\n            return\n        }\n\n        onTitleUpdate(column.id, columnTitle);\n    }\n\n    public render() {\n        const { column, tasks, index, onAddTaskClick } = this.props;\n        const isDeleteButtonDisabled: boolean = Boolean(tasks.length);\n        const { columnTitle } = this.state;\n\n        return (\n            <Draggable draggableId={column.id} index={index}>\n                {(provided) => (\n                <Container\n                    {...provided.draggableProps}\n                    ref={provided.innerRef}>\n                    <ColumnHeader {...provided.dragHandleProps}>\n                        <Title\n                            contentEditable={true}\n                            onBlur={this.onTitleBlur}\n                            onChange={this.onTitleChange}\n                            value={columnTitle}>\n                        </Title>\n                        <DeleteButton\n                            disabled={isDeleteButtonDisabled}\n                            onClick={this.onDeleteColumnClick} />\n                    </ColumnHeader>\n                    <TaskAdd onAddTaskClick={onAddTaskClick} columnId={column.id} />\n                    <Droppable droppableId={column.id} type='tasks'>\n                        {(provided, shapshot) => (\n                            <Column\n                                ref={provided.innerRef}\n                                {...provided.droppableProps}\n                                isDraggingOver={shapshot.isDraggingOver}\n                            >\n\n                                {tasks.map((task: Task, index: number) => (\n                                    <DndTask\n                                        key={task.id}\n                                        task={task}\n                                        index={index}\n                                        onDeleteTaskClick={this.onDeleteTaskClick} />\n                                ))}\n                                {provided.placeholder}\n                            </Column>\n                        )}\n                    </Droppable>\n                </Container>\n                )}\n            </Draggable>\n        )\n    }\n}","import { InitialData, Tasks, Task, Columns, Column, ColumnOrder } from \"./types\"\n\n\nexport const initialData: InitialData = {\n    tasks: {\n        'task-1': {\n            id: 'task-1',\n            content: 'Some task 1'\n        },\n        'task-2': {\n            id: 'task-2',\n            content: 'Some task 2'\n        },\n        'task-3': {\n            id: 'task-3',\n            content: 'Some task 3'\n        },\n        'task-4': {\n            id: 'task-4',\n            content: 'Some task 4'\n        },\n        'task-5': {\n            id: 'task-5',\n            content: 'Some task 5'\n        },\n        'task-6': {\n            id: 'task-6',\n            content: 'Some task 6'\n        }\n    },\n    columns: {\n        'column-1': {\n            id: 'column-1',\n            title: 'to-do',\n            tasksIds: ['task-1', 'task-2', 'task-3']\n        },\n        'column-2': {\n            id: 'column-2',\n            title: 'done',\n            tasksIds: ['task-4', 'task-5']\n        },\n        'column-3': {\n            id: 'column-3',\n            title: 'process',\n            tasksIds: ['task-6']\n        }\n    },\n    columnOrder: ['column-1', 'column-2', 'column-3']\n}\n\nexport const createSomeData = (numBerOfTasks: number, numberOfColumns: number): InitialData => {\n    const iterableArrForTasks: Array<number> = new Array(numBerOfTasks).fill(4);\n\n    const generatedTasks: Tasks = iterableArrForTasks.reduce((acc: Tasks, _: number, index: number): Tasks => {\n        const taskId: string = `Task-${index}`;\n        const taskContent: string = `Some task ${index}`\n\n        const newTask: Task = {\n            id: taskId,\n            content: taskContent\n        };\n\n        return {...acc, [taskId]: newTask}\n    }, {});\n\n    const tasksIds: Array<string> = Object.keys(generatedTasks);\n\n    const iterableColumns: Array<number> = new Array(numberOfColumns).fill(4);\n    const generatedColumns: Columns = iterableColumns.reduce((acc: Columns, _: number, index: number): Columns => {\n        const columnId: string = `column-${index}`;\n        const columnTitle: string = `column ${index} title`;\n\n        if (index === 0) {\n            const newColumn: Column = {\n                id: columnId,\n                title: columnTitle,\n                tasksIds: tasksIds\n            };\n\n            return {...acc, [columnId]: newColumn}\n        }\n\n        const newColumn: Column = {\n            id: columnId,\n            title: columnTitle,\n            tasksIds: []\n        };\n\n        return {...acc, [columnId]: newColumn}\n\n    }, {});\n\n    const columnOrder: ColumnOrder = Object.keys(generatedColumns);\n\n    const initialData: InitialData = {\n        tasks: generatedTasks,\n        columns: generatedColumns,\n        columnOrder: columnOrder\n    };\n\n    return initialData\n}","import { createSomeData } from \"../../../Data/dndData\";\nimport { ScrumDataAction } from '../../action-types/scrum-data';\nimport { SetScrumData, SetScrumDataStatus } from './types';\nimport { ReduxDispatch, StateAction } from \"../../types\";\nimport { InitialData } from \"../../../Data/types\";\nimport { dataStatuses } from \"../../../Data/dataStatuses\";\n\nexport const setScrumData = (data: InitialData): SetScrumData => ({\n    type: ScrumDataAction.setScrumData,\n    payload: data\n});\n\nexport const setScrumDataStatus = (status: string): SetScrumDataStatus => ({\n    type: ScrumDataAction.setScrumDataStatus,\n    payload: status\n});\n\nexport const getScrumData = (dataStatus: string): StateAction<Promise<123>> =>\n    async (dispatch: ReduxDispatch) => {\n\n        if (dataStatus === dataStatuses.initial) {\n            dispatch(setScrumDataStatus(dataStatuses.fetching))\n        } else {\n            dispatch(setScrumDataStatus(dataStatuses.updating))\n        }\n\n        try {\n            const pseudoFetchData: InitialData = await new Promise(function(resolve) {\n                const data = createSomeData(21, 3);\n                resolve(data);\n            });\n\n            dispatch(setScrumData(pseudoFetchData))\n            setTimeout(() => dispatch(setScrumDataStatus(dataStatuses.success)), 500);\n\n            // for example:\n            // if (res.status === 200 && res.ok) {\n            // dispatch success\n            // dispatch data\n            //} else {\n            // dispatch error\n            // throw new Error(`Res status: ${res.status}, res data: ${data})   \n            //}\n        } catch(err) {\n            dispatch(setScrumDataStatus(dataStatuses.error))\n            console.error(err)\n        }\n\n        return 123;\n    }","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport styled from 'styled-components';\nimport { DragDropContext, Droppable, DropResult, DraggableLocation } from 'react-beautiful-dnd';\n\nimport {\n    DndContainerProps,\n    DndContainerState,\n    DndContainerStateProps,\n    DndContainerDispatchProps\n} from './types';\n\nimport { DndColumn } from '../DndColumn';\n\n// import { initialData, createSomeData } from '../../Data/dndData';\nimport { Column, ColumnOrder, Columns, Task } from '../../Data/types';\n\nimport { getScrumData, setScrumData } from '../../Store/Action/scrum-data';\n\nimport { State, ReduxDispatch } from '../../Store/types';\nimport { dataStatuses } from '../../Data/dataStatuses';\n\nconst Container = styled.div`\n    display: flex;\n    width: 100vw;\n    max-width: 100vw;\n    height: 100vh;\n    padding: 25px 40px;\n    overflow-x: auto;\n`;\n\nconst ColumnContainer = styled(Container)`\n    width: auto;\n    height: auto;\n    padding: 0;\n`;\n\nconst ButtonWrapper = styled.div`\n    width: 250px;\n    padding: 8px;\n`;\n\nconst Button = styled.button`\n    position: relative;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    border: 0;\n    border-radius: 4px;\n    background-color: lightgray;\n    opacity: 0.2;\n    transition: opacity 0.3s;\n\n    ::after {\n        content: '';\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translateX(-50%) translateY(-50%);\n        width: 6px;\n        height: 80px;\n        background-color: gray;\n        border-radius: 3px;\n    }\n\n    ::before {\n        content: '';\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translateX(-50%) translateY(-50%) rotate(90deg);\n        width: 6px;\n        height: 80px;\n        background-color: gray;\n        border-radius: 3px;\n    }\n\n    :hover {\n        opacity: 0.5;\n    }\n`;\n\nconst mapStateToProps = (state: State): DndContainerStateProps => {\n    return {\n        initialData: state.scrumDataReducer\n    }\n};\n\nconst mapDispatchToProps = (dispatch: ReduxDispatch): DndContainerDispatchProps => (\n    bindActionCreators(\n        {\n            getScrumData: getScrumData,\n            setScrumData: setScrumData\n        }, dispatch\n    )\n)\n\nexport const DndContainer = connect(mapStateToProps, mapDispatchToProps)(\n    class DndContainer extends React.PureComponent<DndContainerProps, DndContainerState> {\n        constructor(props: DndContainerProps) {\n            super(props);\n\n            this.state = {\n                tasks: {},\n                columns: {},\n                columnOrder: []\n            };\n\n            this.onDragEnd = this.onDragEnd.bind(this);\n            this.onDragStart = this.onDragStart.bind(this);\n            this.onDragUpdate = this.onDragUpdate.bind(this);\n            this.onAddColumnClick = this.onAddColumnClick.bind(this);\n            this.onDeleteColumnClick = this.onDeleteColumnClick.bind(this);\n            this.onDeleteTaskClick = this.onDeleteTaskClick.bind(this);\n            this.onAddTaskClick = this.onAddTaskClick.bind(this);\n            this.onTitleUpdate = this.onTitleUpdate.bind(this);\n        };\n\n        componentDidMount() {\n            if (this.props.initialData.dataStatus === dataStatuses.success) {\n                return\n            } else {\n                this.props.getScrumData(this.props.initialData.dataStatus);\n            }\n        }\n\n        private onAddColumnClick():void {\n            const { columnOrder, columns } = this.props.initialData.data;\n\n            const newColumnId: string = `column-${columnOrder.length}`;\n            const newColumnTitle: string = `column ${columnOrder.length} title`\n            const tasksIds: Array<string> = [];\n\n            const newColumnOrder: ColumnOrder = [...columnOrder, newColumnId];\n            const newColumns: Columns = {\n                ...columns,\n                [newColumnId]: {\n                    id: newColumnId,\n                    title: newColumnTitle,\n                    tasksIds: tasksIds\n                }\n            };\n\n            const newData = {\n                tasks: this.props.initialData.data.tasks,\n                columns: newColumns,\n                columnOrder: newColumnOrder\n            }\n\n            this.props.setScrumData(newData);\n        };\n\n        private onDeleteColumnClick(columnId: string): void {\n            const { data } = this.props.initialData;\n            const { columns, columnOrder } = data;\n\n            delete columns[columnId];\n\n            const newOrder = columnOrder.filter(id => columnId !== id);\n\n            const newData = {\n                ...data,\n                columns: columns,\n                columnOrder: newOrder\n            };\n\n            this.props.setScrumData(newData);\n        };\n\n        private onDeleteTaskClick(taskId: string, columnId: string): void {\n            const { data } = this.props.initialData;\n            const { tasks, columns, columnOrder } = data;\n\n            delete tasks[taskId];\n\n            const newParentColumnTasks = columns[columnId].tasksIds.filter(id => taskId !== id);\n\n            const newData = {\n                tasks: tasks,\n                columns: {\n                    ...columns,\n                    [columnId]: {\n                        ...columns[columnId],\n                        tasksIds: newParentColumnTasks\n                    }\n                },\n                columnOrder: columnOrder\n            };\n\n            this.props.setScrumData(newData);\n        };\n\n        private onAddTaskClick(columnId: string, taskContent: string): void {\n            const { data } = this.props.initialData;\n            const { tasks } = data;\n\n            const tasksLength: number = Object.keys(tasks).length;\n\n            const newTask: Task = {\n                id: `Task-${tasksLength}`,\n                content: taskContent\n            };\n            \n            const newColumn: Column = {\n                ...data.columns[columnId],\n                tasksIds: [`Task-${tasksLength}`, ...data.columns[columnId].tasksIds] \n            };\n\n            const newData = {\n                ...data,\n                tasks: {\n                    ...data.tasks,\n                    [`Task-${tasksLength}`]: newTask\n                },\n                columns: {\n                    ...data.columns,\n                    [columnId]: newColumn\n                }\n            };\n\n            this.props.setScrumData(newData);\n        };\n\n        onTitleUpdate(columnId: string, title: string): void {\n            const { data } = this.props.initialData;\n\n            const newData = {\n                ...data,\n                columns: {\n                    ...data.columns,\n                    [columnId]: {\n                        ...data.columns[columnId],\n                        title: title\n                    }\n                }\n            };\n\n            this.props.setScrumData(newData);\n        }\n\n        private onDragStart():void {\n            document.body.style.color = 'red';\n            document.body.style.transition = 'background-color 0.3s ease';\n        };\n\n        private onDragUpdate(update: any) {\n            const { destination } = update;\n            const opacity = destination\n                ? destination.index / Object.keys(this.state.tasks).length\n                : 0;\n\n            document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity})`;\n        };\n\n        private onDragEnd(result: DropResult): void {\n            document.body.style.color = 'inherit';\n            document.body.style.backgroundColor = 'inherit';\n\n            const { source, draggableId, type } = result; //destination\n\n            if (!result.destination) {\n                return;\n            }\n\n            if (this.isDragPositionEqual(result.destination, source)) {\n                return;\n            }\n\n            if (type === 'column') {\n                const newColumnOrder = Array.from(this.props.initialData.data.columnOrder);\n                newColumnOrder.splice(source.index, 1);\n                newColumnOrder.splice(result.destination.index, 0, draggableId);\n\n                const newData = {\n                    ...this.props.initialData.data,\n                    columnOrder: newColumnOrder\n                };\n                \n                this.props.setScrumData(newData);\n\n                return\n            }\n\n            const { data } = this.props.initialData;\n            const startColumn: Column = data.columns[source.droppableId];\n            const finishColumn: Column = data.columns[result.destination.droppableId];\n\n            return startColumn === finishColumn\n                ? this.dragInsideColumn(result)\n                : this.dragOutsideColumn(result);\n        };\n\n        private isDragPositionEqual(destination: DraggableLocation, source: DraggableLocation): boolean {\n            if (\n                destination.droppableId === source.droppableId &&\n                destination.index === source.index\n            ) {\n                return true;\n            }\n\n            return false;\n        };\n\n        private dragInsideColumn(result: DropResult): void {\n            const { destination, source, draggableId } = result;\n\n            if (!destination) {\n                return;\n            }\n\n            const { data } = this.props.initialData;\n\n            const column: Column = data.columns[destination.droppableId];\n\n            const newTasksIds = [...column.tasksIds];\n\n            newTasksIds.splice(source.index, 1);\n            newTasksIds.splice(destination.index, 0, draggableId);\n\n            const newColumn = {\n                ...column,\n                tasksIds: newTasksIds\n            };\n\n            const newData = {\n                ...data,\n                columns: {\n                    ...data.columns,\n                    [newColumn.id]: newColumn, \n                }\n            }\n\n            this.props.setScrumData(newData);\n        };\n\n        private dragOutsideColumn(result: DropResult): void {\n            const { destination, source, draggableId } = result;\n            \n            if (!destination) {\n                return;\n            }\n\n            const { data } = this.props.initialData;\n\n            const startColumn: Column = data.columns[source.droppableId];\n            const finishColumn: Column = data.columns[destination.droppableId];\n\n            const startTasksIds = Array.from(startColumn.tasksIds);\n            startTasksIds.splice(source.index, 1);\n            const newStartColumn = {\n                ...startColumn,\n                tasksIds: startTasksIds\n            };\n\n            const finishTasksIds = Array.from(finishColumn.tasksIds);\n            finishTasksIds.splice(destination.index, 0, draggableId);\n            const newFinishColumn = {\n                ...finishColumn,\n                tasksIds: finishTasksIds\n            };\n\n            const newData = {\n                ...data,\n                columns: {\n                    ...data.columns,\n                    [newStartColumn.id]: newStartColumn,\n                    [newFinishColumn.id]: newFinishColumn\n                }\n            }\n\n            this.props.setScrumData(newData);\n        };\n\n        public render() {\n            const { dataStatus } = this.props.initialData;\n            const { tasks, columns, columnOrder } = this.props.initialData.data;\n            const isAddColumnShow: boolean = columnOrder.length < 6;\n\n            if ( dataStatus === dataStatuses.fetching || dataStatus === dataStatuses.initial ) {\n                return (\n                    <Container>\n                        <span>Загружаемся</span>\n                    </Container>\n                )\n            }\n\n            if ( dataStatus === dataStatuses.error ) {\n                return (\n                    <Container>\n                        <span>Ошибка =(</span>\n                    </Container>\n                )\n            }\n            \n            return (\n                <Container>\n                    <DragDropContext\n                        onDragStart={this.onDragStart}\n                        onDragUpdate={this.onDragUpdate}\n                        onDragEnd={this.onDragEnd}>\n                            <Droppable\n                                droppableId='all-columns'\n                                direction='horizontal'\n                                type='column'>\n                                {(provided) => (\n                                    <ColumnContainer {...provided.droppableProps} ref={provided.innerRef}>\n                                        {\n                                            columnOrder.map((columnId: string, index: number) => {\n                                                const column = columns[columnId];\n                                                const columnTasks = column.tasksIds.map((taskId: string) => tasks[taskId]);\n\n                                                return <DndColumn\n                                                            key={column.id}\n                                                            index={index}\n                                                            column={column}\n                                                            tasks={columnTasks}\n                                                            onDeleteColumnClick={this.onDeleteColumnClick}\n                                                            onDeleteTaskClick={this.onDeleteTaskClick}\n                                                            onTitleUpdate={this.onTitleUpdate}\n                                                            onAddTaskClick={this.onAddTaskClick} />\n                                            })\n                                        }\n                                        {provided.placeholder}\n                                    </ColumnContainer>\n                                )}\n                        </Droppable>\n                    </DragDropContext>\n                    {\n                        isAddColumnShow &&\n                        <ButtonWrapper>\n                            <Button onClick={this.onAddColumnClick} />\n                        </ButtonWrapper>\n                    }\n                </Container>\n            )\n        }\n    }\n)","import React from 'react'\nimport ReactDOM from 'react-dom';\n\nexport class Portal extends React.PureComponent<any, any> {\n    el: HTMLElement = document.createElement('div');\n\n    componentDidMount() {\n        document.body.appendChild(this.el);\n    }\n\n    componentWillUnmount() {\n        document.body.removeChild(this.el);\n    }\n\n    render() {\n        const { children } = this.props;\n        \n        return ReactDOM.createPortal(children, this.el);\n    }\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Link } from 'react-router-dom';\n\nimport { Portal } from '../../hoc/Portal';\n\nimport { setRouterData } from '../../Store/Action/router-data';\n\nimport { ReduxDispatch, State } from '../../Store/types';\nimport { RouterDataState } from '../../Store/Reducer/router-data/types';\n\nexport const ModalContainer = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n`;\n\nexport const ModalBg = styled(Link)`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    // background-color: red;\n    // opacity: 0.5;\n    z-index: 10;\n`;\n\nexport const ModalContent = styled.div`\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    width: 400px;\n    height: 250px;\n    padding: 15px;\n    border-radius: 10px;\n    background-color: white;\n    z-index: 11;\n`;\n\nconst mapStateToProps = (state: State) => {\n    return {\n        routerData: state.routerDataReducer,\n        srumData: state.scrumDataReducer\n    }\n}\n\nconst mapDispatchToProps = (dispatch: ReduxDispatch) => (\n    bindActionCreators(\n        {\n            setRouterData: setRouterData\n        }, dispatch\n    )\n)\n\nexport const TaskModal = connect(mapStateToProps, mapDispatchToProps)(\n    class DndTaskModal extends React.PureComponent<any, any> {\n        constructor(props: any) {\n            super(props);\n\n            this.state = {\n                taskId: ''\n            };\n\n            this.onLinkClick = this.onLinkClick.bind(this);\n        }\n\n        componentDidMount() {\n            this.setState({\n                taskId: this.props.match.params.id\n            });\n        }\n\n        onLinkClick() {\n            const newRouterData: RouterDataState = {\n                isModalShow: false\n            };\n\n            this.props.setRouterData(newRouterData)\n        }\n\n        render() {\n\n            return (\n                <Portal>\n                    <ModalContainer>\n                        <ModalContent>\n                            <h3>tasktask</h3>\n                            <Link to='/' onClick={this.onLinkClick}>123</Link>\n                        </ModalContent>\n                        <ModalBg to='/' />\n                    </ModalContainer>\n                </Portal>\n            )\n        }\n    }\n)","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport class Task extends React.PureComponent<any, any> {\n    render() {\n        return (\n            <div style={{background: 'red'}}>\n                task task task\n                <Link to='/'>123</Link>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Route, Switch, useLocation } from 'react-router';\nimport { connect } from 'react-redux';\n// import logo from './logo.svg';\n\nimport { DndContainer } from './Containers/DndContainer/index.tsx';\nimport { TaskModal } from './Containers/TaskModal';\nimport { Task } from './Containers/Task';\n\nimport './App.css';\n\nconst mapStateToProps = (state) => ({\n  routerData: state.routerDataReducer\n})\n\nexport const App = connect(mapStateToProps, null)(\n  function App(props) {\n    \n    return (\n      <div className=\"App\">\n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header> */}\n        <main>\n          <Switch>\n            <Route exact path='/' component={DndContainer} />\n            <Route path='/task/:id' component={props.routerData.isModalShow ? TaskModal : Task} />\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Router } from 'react-router';\nimport { createBrowserHistory } from \"history\";\n\nimport { store } from './Store/index';\n\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst customHistory = createBrowserHistory();\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router history={customHistory}>\n            <App />\n        </Router>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}